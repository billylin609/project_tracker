use std::fs::File;
use std::io::prelude::*;
use std::io::ErrorKind;


fn main() {
    let mut file_data: String = String::new();

    file_test(&"DropHere/data.txt".to_string()).read_to_string(&mut file_data)
        .expect("Failed to read the file");

    /*
     * At the end of the file the last value do not have the \n identifier
     * therefore the two \n helped the coded to automatically count the last item
     */
    file_data.push('\n');
    file_data.push('\n');

    let vec_all: Vec<i64> = extract_value(&file_data);

    let result: [i64; 3] = sort_max(&vec_all);

    println!("rank1: {}\nrank2: {}\nrank3: {}", result[0], result[1], result[2]);
    println!("in a total of: {}", result[0] + result[1] + result[2]);
}

fn file_test (source_dir: & String) -> File {
    return match File::open(source_dir) {
        Ok(fc) => fc,
        Err(ref err) if err.kind() == ErrorKind::NotFound => {
            std::fs::create_dir_all("DropHere").expect("cannot create the drop folder");
            File::create(source_dir).expect("cannot create the file");
            std::fs::write(source_dir, "test").expect("File is protected cannot write data");
            file_test(source_dir)
        },
        Err(_error) => {
            panic!("unkown issue");
        }
    };
}

fn extract_value(file_data:& String) -> Vec<i64> {
    let mut str_num: String = String::new();

    let mut vec_single: Vec<i64> = Vec::new();

    let mut vec_all_in: Vec<i64> = Vec::new();

    let mut sum: i64 = 0;

    for character in file_data.chars() {
        if character >= '0' && character <= '9' {
            str_num.push(character);
        } else if character == '\n' {
            if str_num.trim() == "" {
                for item in &vec_single {
                    sum = item + sum;
                }
                vec_all_in.push(sum);
                vec_single.clear();
                str_num.clear();
                sum = 0;
            } else {
                vec_single.push(str_num.parse::<i64>().unwrap());
                str_num.clear();
            }
        } else {
        }
    }

    return vec_all_in
}

fn sort_max(vec_all: &Vec<i64>) -> [i64; 3] {
    let mut result: [i64; 3] = [0;3];

    let mut index = 0;

    for item in vec_all {
        if *item > result[0] {
            result[0] = *item;
        } else if *item == result[0] {
            index += 1;
        }
    }
    if index != 0 {
        index -= 1;
        result[1] = result[0];
        if index != 0 {
            result[2] = result[0];
            return result;
        }
    } else {
        index = 0;
        for item in vec_all {
            if *item < result[0] && *item > result[1] {
                result[1] = *item;
            } else if *item == result[1] {
                index += 1;
            }
        }
    }
    
    if index != 0 {
        result[2] = result[1];
    } else {
        for item in vec_all {
            if *item < result[1] && *item > result[2] {
                result[2] = *item;
            }
        }
    }

    return result;
}
